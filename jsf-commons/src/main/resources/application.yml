logging:
  config: classpath:logback-boot.xml # 日志配置文件
  path: ./logs/ # 日志存放目录
server:
  port: 8080 # 默认端口号
  connection-timeout: 5000
  use-forward-headers: true
  tomcat: # tomcat容器
    uri-encoding: UTF-8
    max-threads: 800
    min-spare-threads: 20
    max-connections: 2000
  undertow: # undertow容器
    io-threads: 4 # 设置IO线程数，主要执行非阻塞的任务,负责多个连接，默认设置每个CPU核心一个线程
    worker-threads: 20 # 阻塞任务线程池, 执行类似servlet请求阻塞IO操作，默认是IO线程数*8
    buffer-size: 1024 # 用于服务器连接的IO操作，越小的空间被利用越充分
    direct-buffers: true # 是否分配的直接内存(NIO直接分配的堆外内存)
  servlet:
    session:
      timeout: 30m # session过期时间
#      cookie:
#        name: SESSIONID
#    context-path:
#  ssl: # 不推荐使用，Nginx替代
#    enabled: false
#    key-store: classpath:test.jks
#    key-store-type: JKS
#    key-password: 123456
spring:
  profiles:
    active: api-dev # 指定应用和环境 {0}-{1}  0：表示应用，1：表示环境(固定：dev、test、pro)
  application:
    name: API
    simple: api
  jmx:
    enabled: true
  cache: # 缓存设置
    type: REDIS # 缓存类型 NONE | REDIS
    cache-names: rds # 缓存的名称(多个用半角逗号隔开)
    redis:
      time-to-live: 20m
  session: # session存储类型 NONE | REDIS
    store-type: REDIS
    redis:
      namespace: spring:sessions # 命名空间
  mvc:
    static-path-pattern: /static/** # 静态地址映射
  servlet:
    multipart: # 文件上传限制
      max-file-size: 50MB
      max-request-size: 10MB
  resources:
    static-locations: classpath:/static/ # 静态文件
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss # json时间转换
    time-zone: GMT+8
    default-property-inclusion: non_null # json空不输出
  freemarker:
    template-loader-path: classpath:/templates # 模板文件目录
    suffix: .ftl # ftlh from springboot2.2
    cache: true
    charset: UTF-8
    settings: # 数据格式设置
      template_update_delay: 0
      default_encoding: UTF-8
      locale: zh_CN
      url_escaping_charset: zh_CN
      date_format: yyyy-MM-dd
      time_format: HH:mm:ss
      datetime_format: yyyy-MM-dd HH:mm:ss
      number_format: 0.##
      boolean_format: true,false
      classic_compatible: true
      whitespace_stripping: true
      log_template_exceptions: true # 日志打印
      template_exception_handler: ignore
  datasource:
    druid: # Druid数据源配置
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://dev:3306/jframe?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&zeroDateTimeBehavior=convertToNull&useSSL=false
      username: root
      password: 12345678
      initial-size: 5 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      max-active: 20 # 最大连接池数量 Default:8
      max-wait: 60000 # 获取连接时最大等待时间
      min-idle: 5 # 最小连接池数量
      time-between-eviction-runs-millis: 60000 # 1.Destroy线程会检测连接的间隔时间 2.test-while-idle的判断依据
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 # 用来检测连接是否有效的sql，要求是一个查询语句
      max-open-prepared-statements: 20 # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
      remove-abandoned: true # 连接使用超过时间限制是否回收
      remove-abandoned-timeout-millis: 60000 # 超过时间限制时间,Default:300s
      test-on-borrow: false # 申请连接时执行validationQuery检测连接是否有效,会降低性能
      test-on-return: false # 归还连接时执行validationQuery检测连接是否有效,会降低性能
      test-while-idle: true # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
      filter: # 自定义StatFilter配置
        stat:
          enabled: false
          db-type: mysql
          log-slow-sql: true
          slow-sql-millis: 2000
      stat-view-servlet: # Druid监控配置
        enabled: false
        url-pattern: /druid/*
        reset-enable: true
        login-username: dbadmin
        login-password: D8JOAW912UFHHIJVBB01YUIP
      web-stat-filter:
        enabled: false
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,*.woff,/druid/*"
      aop-patterns: com.jsf.service.* # Spring监控AOP切入点
  aop:
    proxy-target-class: true # 开启AOP，使用CGLIB代理
  task: # 线程池设置
    corePoolSize: 10 # 维护线程的最少数量
    maxPoolSize: 30 # 线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程
    queueCapacity: 200 # 线程池所使用的缓冲队列
    keepAliveSeconds: 60 # 维护线程所允许的空闲时间
    waitOnShutdown: true # 设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean
    awaitTerminationSeconds: 60 # 设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁
  mail: # 邮件服务器设置
    host: smtp.163.com
    username: xxx@163.com
    password: xxx
    port: 994
    properties:
      mail:
        smtp:
          ssl:
            enable: true
          auth: true
          timeout: 25000
  redis: # spring redis
    host: dev
    port: 6379
    password:  # 密码
    database: 0
    timeout: 5s
    lettuce: # 使用lettuce或者jedis
      pool:
        max-idle: 50
        min-idle: 10
        max-active: 10
  #    sentinel: # Sentinel集群
  #      master: mymaster
  #      nodes:
  #        - dev:26379
  #        - dev:26380
  #    cluster: # Cluster集群(6)
  #      nodes:
  #        - dev:7001
  #        - dev:7002
  #        - dev:7003
  #        - dev:7004
  #        - dev:7005
  #        - dev:7006
  rabbitmq: # rabbitmq
    host: dev # 服务器地址
    port: 5672
    username: rabbitmq
    password: 12345678
    virtual-host: /rmq # 虚拟Host,需要预先创建 '/hostname'并设置权限
    requested-heartbeat: 10s
    publisher-confirms: true # 开启发送确认
    publisher-returns: true # 开启发送失败退回
    listener:
      simple:
        acknowledge-mode: manual # 开启ACK
        concurrency: 10 # 消费者数量
        prefetch: 50 # 每个消费者获取最大投递数量
        retry: # 是否支持重试
          enabled: true
          initial-interval: 10s
          max-attempts: 3
  #    cache:
  #      channel:
  #        size: 100
  quartz: # quartz配置
    job-store-type: jdbc # jdbc | memory
    properties: # Quartz属性配置
      org:
        quartz:
          scheduler:
            instanceName: DefaultQuartzScheduler
            instanceId: AUTO
          jobStore: # jdbc支持(需先导入SQL)
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: qz_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10 # 并发数
            threadPriority: 5 # 优先级
            threadsInheritContextClassLoaderOfInitializingThread: true
jmx: # jmx监控
  host: 127.0.0.1
  port: 1${server.port} # 端口 1+服务端口
fdfs: # fastDFS配置
  so-timeout: 3000
  connect_timeout: 3000
  tracker-list: # 可设置多个
    - dev:22122
  nginx: http://192.168.1.1/ # DFS Nginx代理服务器地址
system: # 系统配置
  dev: true # 是否开发环境
  version: 6 # 系统版本
  appkey: "" # 应用访问校验码
  upload: # 上传配置
    file_path: "~/Downloads/TMP/attachment"
    fdfs: false
    img_size: 3
    img_type: jpg,jpeg,png,gif
    file_size: 10
    file_type: zip,rar

# 环境配置说明：
# 1、spring.profiles.active必须严格按照注释命名
# 2、spring.application.simple为应用简称，必须指定，否则日志不生效
# 3、生产环境务必配置好静态文件路径和URL前缀、日志路径、数据库等，开发环境可以使用`默认`不配置
# 4、可复写以上公共配置，如system.update.file_path
# 5、环境指定：spring.profiles.active=api-dev


##################### 后台管理端 开发 #####################
---
spring:
  profiles: manage-dev
  application:
    name: WEB-MANAGE
    simple: manage
server:
  port: 8080

##################### 后台管理端 生产 #####################
---
spring:
  profiles: manage-pro
  application:
    name: WEB-MANAGE
    simple: manage
server:
  port: 18080

##################### API端 开发 #####################
---
spring:
  profiles: api-dev
  application:
    name: WEB-API
    simple: api
server:
  port: 8081

##################### API端 生产 #####################
---
spring:
  profiles: api-pro
  application:
    name: WEB-API
    simple: api
server:
  port: 18081